--[[--
-----------------------------

Gamut Compress is a tool to compress out of gamut colors back into gamut.
Written by Jed Smith with lots of help from the ACES Gamut Mapping Virtual Working Group
https://github.com/colour-science/aces-vwg-gamut-mapping-2020/tree/master/model
https://github.com/jedypod/gamut-compress
https://community.acescentral.com/t/rgb-saturation-gamut-mapping-approach-and-a-comp-vfx-perspective
https://community.acescentral.com/c/aces-development-acesnext/vwg-aces-gamut-mapping-working-group

Initial version of this Fuse written by Jacob Danell. Thank you! :D


------------------
Documenation

Threshold
Percentage of the core gamut to protect. 
If threshold is 0.8, the inner 80% of the gamut will be unaffected 
and out of gamut values will be compressed into the outer 20% of the gamuts color volume.

Power
The exponent of the power function. This controls the aggressiveness of the compression.
A values of 1.0 is equivalent to Reinhard.

Distance Limits
Per color component control to specify what distance will be compressed to the gamut boundary. 
For example, a value of cyan=0.2 will map colors with a distance of 
red=1.2 from the achromatic axis to red=1.0, which is the gamut boundary.

Direction
Specifies whether to apply or inverse the gamut compression operation.


-------------------------
Installation

To install this fuse for Blackmagic Fusion Studio, copy the file to your UserData Path Map folder:

Linux:
  ~/.fusion/BlackmagicDesign/Fusion/Fuses
OSX: 
  ~/Library/Application Support/Blackmagic Design/Fusion
Windows:
  %appdata%\Blackmagic Design\Fusion\Fuses


For the Fusion page in Resolve Lite or Resolve Studio use these UserData folders:

Linux: 
  ~/.local/share/DaVinciResolve/Fusion/Fuses
OSX:
  ~/Library/Application Support/Blackmagic Design/DaVinci Resolve/Fusion
Windows:
  %appdata%\Blackmagic Design\DaVinci Resolve\Fusion\Fuses


--]]--


FuRegisterClass("GamutCompress", CT_Tool, {
    REGS_Name = "Gamut Compress",
    REGS_Category = "Color",
    REGS_OpIconString = "",
    REGS_OpDescription = "Compress out of gamut colors back into gamut.",
    REG_Fuse_NoEdit = false,
    REG_Fuse_NoReload = false,
    REG_SupportsDoD = false,
})


function Create()
  InThresholdR = self:AddInput("threshold_c", "threshold_c", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.8,
    INP_MinAllowed = 0.4,
    INP_MaxScale = 0.9999,
  })

  InThresholdG = self:AddInput("threshold_m", "threshold_m", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.8,
    INP_MinAllowed = 0.4,
    INP_MaxScale = 0.9999,
  })

  InThresholdB = self:AddInput("threshold_y", "threshold_y", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.8,
    INP_MinAllowed = 0.4,
    INP_MaxScale = 0.9999,
  })
  
  InPower = self:AddInput("power", "power", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.2,
    INP_MinAllowed = 1.0,
    INP_MaxScale = 3.0,
  })
  
  self:BeginControlNest("distance limits", "distance limits", true, {})
  
  InCyan = self:AddInput("cyan", "cyan", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.09,
    INP_MinAllowed = 0,
    INP_MaxScale = 1,
  })
  
  InMagenta = self:AddInput("magenta", "magenta", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.24,
    INP_MinAllowed = 0,
    INP_MaxScale = 1,
  })
  
  InYellow = self:AddInput("yellow", "yellow", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.12,
    INP_MinAllowed = 0,
    INP_MaxScale = 1,
  })
  
  self:EndControlNest()
  
  InInvert = self:AddInput("invert", "invert", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_MinAllowed = 0.0,
    INP_MaxAllowed = 1.0,
    INP_Default = 0.0,
  })

  InOverlay = self:AddInput("overlay graph", "overlay graph", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_MinAllowed = 0.0,
    INP_MaxAllowed = 1.0,
    INP_Default = 0.0,
  })

  InImage = self:AddInput("Input", "Input", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


function Process(req)
  local src = InImage:GetValue(req)
  local dst = Image{ IMG_Like = src, IMG_DeferAlloc = true }

  if not req:IsPreCalc() then
    local node = DVIPComputeNode(req, "SolidKernel", SolidKernel, "SolidParams", SolidParams)
    local params = node:GetParamBlock(SolidParams)

    params.threshold_r = InThresholdR:GetValue(req).Value
    params.threshold_g = InThresholdG:GetValue(req).Value
    params.threshold_b = InThresholdB:GetValue(req).Value
    params.power = InPower:GetValue(req).Value
    params.cyan = InCyan:GetValue(req).Value
    params.magenta = InMagenta:GetValue(req).Value
    params.yellow = InYellow:GetValue(req).Value
    params.invert = InInvert:GetValue(req).Value
    params.srcCompOrder = src:IsMask() and 1 or 15
    params.srcSize[0] = src.Width
    params.srcSize[1] = src.Height
    params.overlay = InOverlay:GetValue(req).Value
    node:SetParamBlock(params)
 
    node:AddInput("src", src)
    node:AddOutput("dst", dst)
 
    local ok = node:RunSession(req)
 
    if not ok then
      dst = nil
    end

  end

  OutImage:Set(req, dst)
end


SolidParams = [[
  float threshold_r;
  float threshold_g;
  float threshold_b;
  float power;
  float cyan;
  float magenta;
  float yellow;
  int invert;
  int overlay;
  int srcCompOrder;
  int srcSize[2];
]]

 
SolidKernel = [[
  // calculate compressed distance
  __DEVICE__ float compress(float dist, float lim, float thr, bool invert, float power) {
    float cdist, s;
    if (dist < thr) {
      cdist = dist;
    } else {
      // power(p) compression function plot https://www.desmos.com/calculator/54aytu7hek
      if (lim < 1.0001f) {
        return dist; // disable compression, avoid nan
      }
      s = (lim-thr)/_powf(_powf((1.0f-thr)/(lim-thr),-power)-1.0f,1.0f/power); // calc y=1 intersect
      if (invert == 0) {
        cdist = thr+s*((dist-thr)/s)/(_powf(1.0f+_powf((dist-thr)/s,power),1.0f/power)); // compress
      } else {
        if (dist > (thr + s)) {
          cdist = dist; // avoid singularity
        } else {
          cdist = thr+s*_powf(-(_powf((dist-thr)/s,power)/(_powf((dist-thr)/s,power)-1.0f)),1.0f/power); // uncompress
        }
      }
    }
    return cdist;
  }

  __KERNEL__ void SolidKernel(__CONSTANTREF__ SolidParams *params, __TEXTURE2D__ src, __TEXTURE2D_WRITE__ dst)
  {
    DEFINE_KERNEL_ITERATORS_XY(x, y);
    float4 rgb = _tex2DVecN(src, x, y, params->srcCompOrder);

    // normalised pixel coordinates
    float2 pos = make_float2((float)x / params->srcSize[0], (float)y / params->srcSize[1]);

    // thr is the percentage of the core gamut to protect.
    float3 thr = make_float3(
      _fminf(0.9999f, params->threshold_r),
      _fminf(0.9999f, params->threshold_g),
      _fminf(0.9999f, params->threshold_b));
    
    // lim is the max distance from the gamut boundary that will be compressed
    // 0 is a no-op, 1 will compress colors from a distance of 2.0 from achromatic to the gamut boundary
    float3 lim;
    lim = make_float3(params->cyan+1.0f, params->magenta+1.0f, params->yellow+1.0f);

    // achromatic axis 
    float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));

    // distance from the achromatic axis for each color component aka inverse rgb ratios
    float3 dist;
    dist.x = ach == 0.0f ? 0.0f : (ach-rgb.x)/_fabs(ach);
    dist.y = ach == 0.0f ? 0.0f : (ach-rgb.y)/_fabs(ach);
    dist.z = ach == 0.0f ? 0.0f : (ach-rgb.z)/_fabs(ach);

    // compress distance with user controlled parameterized shaper function
    float sat;
    float3 csat, cdist;
    cdist = make_float3(
      compress(dist.x, lim.x, thr.x, params->invert, params->power),
      compress(dist.y, lim.y, thr.y, params->invert, params->power),
      compress(dist.z, lim.z, thr.z, params->invert, params->power));

    // recalculate rgb from compressed distance and achromatic
    // effectively this scales each color component relative to achromatic axis by the compressed distance
    float4 crgb = make_float4(
      ach-cdist.x*_fabs(ach),
      ach-cdist.y*_fabs(ach),
      ach-cdist.z*_fabs(ach),
      rgb.w);

    // Graph overlay method based on one by Paul Dore
    // https://github.com/baldavenger/DCTLs/tree/master/ACES%20TOOLS
    if (params->overlay == 1) {
      float3 cramp = make_float3(
        compress(2.0f * pos.x, lim.x, thr.x, params->invert, params->power),
        compress(2.0f * pos.x, lim.y, thr.y, params->invert, params->power),
        compress(2.0f * pos.x, lim.z, thr.z, params->invert, params->power));
      bool overlay_r = _fabs(2.0f * pos.y - cramp.x) < 0.004f || _fabs(pos.y - 0.5f) < 0.0005f ? true : false;
      bool overlay_g = _fabs(2.0f * pos.y - cramp.y) < 0.004f || _fabs(pos.y - 0.5f) < 0.0005f ? true : false;
      bool overlay_b = _fabs(2.0f * pos.y - cramp.z) < 0.004f || _fabs(pos.y - 0.5f) < 0.0005f ? true : false;
      crgb.x = overlay_g || overlay_b ? 1.0f : crgb.x;
      crgb.y = overlay_b || overlay_r ? 1.0f : crgb.y;
      crgb.z = overlay_r || overlay_g ? 1.0f : crgb.z;
    }

      _tex2DVec4Write(dst, x, y, crgb);
  }
]]